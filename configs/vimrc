set nocompatible
filetype off
set rtp+=~/.vim/vundle/
call vundle#begin()
Plugin 'gmarik/Vundle.vim'         "better plugin manager
Plugin 'kien/ctrlp.vim'            "open files using fuzzy matching
Plugin 'scrooloose/nerdtree'       "file explorer sidebar
Plugin 'jistr/vim-nerdtree-tabs'   "better NERDtree integration with tabs
Plugin 'Lokaltog/vim-easymotion'   "move to any character!
Plugin 'bling/vim-airline'         "riced status bar
Plugin 'Yggdroot/indentLine'       "vertical bars showing indent level
Plugin 'flazz/vim-colorschemes'    "color schemes!
call vundle#end()

"-------------------------------------------------
" basic settings
"-------------------------------------------------
syntax on                     "enable syntax highlighting
set synmaxcol=256             "highlight up to X columns (binary files)
set number                    "enable line numbers

"color scheme
let background_file=$HOME."/.vimrc-background"
if filereadable(background_file)
    exec 'so ' . background_file
else
    colorscheme hemisu
    set background=light
endif

"set terminal to 256 color
if $TERM == "xterm" || $TERM == "xterm-256color" || $TERM == "screen" || $TERM == "screen-256color"
    set t_Co=256
endif

"set gutter width to 80 characters
if exists('+colorcolumn')
    set colorcolumn=80
endif

"-----------------------------------------
" whitespace settings
"-----------------------------------------
set ff=unix ffs=unix,dos      "preferred eol styles
set enc=utf-8 fenc=utf-8      "preferred character encoding
set noexpandtab               "don't use spaces instead of tab
set tabstop=4                 "spaces that tab counts for
set softtabstop=4             "spaces that tab counts for in edit mode
set shiftwidth=4              "spaces for each step of auto-indent
set autoindent                "auto indentation
set wrapscan                  "search again from top if no matches
set nowrap                    "don't wrap long lines
filetype on                   "enable setting options based on file

"----------------------------------------
" editor behavior
"----------------------------------------
set bs=indent,eol,start       "allow backspacing over indent, eol and ?
set virtualedit=onemore       "allow moving cursor up to EOL+1 character
set wildignorecase            "case-insensitive filename completion in commands
set splitbelow splitright     "change placement when splitting a buffer
set shell=/bin/zsh            "when opening shell, use zsh
set mouse=a                   "enable mouse support
set noincsearch               "disable "live" search
set hlsearch                  "highlight searches
set ignorecase                "ignore case in searches
set smartcase                 " ...unless they contain uppercase chars
set scrolloff=10              "keep at least 10 lines below and above cursor
set nojoinspaces              "don't put double spaces when using auto wrapping
set fillchars=vert:\│         "better vertical fill character

"----------------------------------------
" miscellaneous
"----------------------------------------
set noeb vb t_vb=             "disable beeping
set laststatus=2              "always display status line
set nospell                   "spell checker is off by default
set spelllang=en_us,pl        "spell checker languages
set modeline                  "allow files to embed file-specific vim settings
set modelines=5               " ...within X lines at the top of that file

"------------------------------------------
" storage
"------------------------------------------
"double slash prevents file name collision, by using full file paths
set viminfo+=n~/.vim/viminfo       "set path to last session data storage
set backupdir=~/.vim/backup//      "set path to file backups
set backup                         "enable backups
set directory=~/.vim/swap//        "set path to swap files (.*.swp)
set undodir=~/.vim/undo//          "set path to undo data file

"----------------------------------------
" highlight bad whitespace
"----------------------------------------
"highlight color for bad whitespace
highlight SpecialKey ctermbg=NONE ctermfg=187
"highlight trailing white space
highlight ExtraWhitespace ctermbg=red guibg=red
"fix ColorColumn on dark backgrounds
if &background == 'dark'
    highlight ColorColumn ctermbg=52
end
"show white characters
set list listchars=tab:→\ ,trail:·
"match trailing spaces and spaces before a tab
autocmd BufWinEnter * match ExtraWhitespace /\v\s+$|\t+ ([^*]|$)| \t+/

"----------------------------------------
" custom commands
"----------------------------------------
"fast indentation styles for working with other people's projects
command! TwoSpaces set et sts=2 ts=2 sw=2
command! FourSpaces set et sts=4 ts=4 sw=4
command! Tabs set noet sts=4 ts=4 sw=4
"create working dirs for current file
command! CreateDirs execute ':silent !mkdir -p %:h' | write
"copy text file with hard wraps (e.g. Markdown) as one line
function! CopyWithoutHardWrapping()
    let old_tw=&textwidth
    :set tw=10000
    silent! normal gg gqG
    silent! normal gg "*yG
    let &textwidth=old_tw
    undo
endfunction
command! CopyWithoutHardWrapping call CopyWithoutHardWrapping()

"----------------------------------------
" custom keyboard bindings
"----------------------------------------
"arrows over visible lines, not physical lines
noremap  <buffer> <silent> <Up>   gk
noremap  <buffer> <silent> <Down> gj
noremap  <buffer> <silent> <Home> g<Home>
noremap  <buffer> <silent> <End>  g<End>
inoremap <buffer> <silent> <Up>   <C-o>gk
inoremap <buffer> <silent> <Down> <C-o>gj
inoremap <buffer> <silent> <Home> <C-o>g<Home>
inoremap <buffer> <silent> <End>  <C-o>g<End>
"ctrl+tab, ctrl+shift+tab = move to next/prev tab
nnoremap <Esc>[1;5I gt<CR>
nnoremap <Esc>[1;6I gT<CR>
"ctrl+t = open new tab
inoremap <silent> <C-t> <Esc>:tabnew<CR>
nnoremap <silent> <C-t> :tabnew<CR>
"ctrl+s = save
inoremap <silent> <C-s> <Esc>:update<CR>
nnoremap <silent> <C-s> :<C-u>update<CR>
"ctrl+z = open shell
nnoremap <silent> <C-z> :sh<CR>
"ctrl+q = exit
inoremap <silent> <C-q> <Esc>:q<CR>
nnoremap <silent> <C-q> :q<CR>
"ctrl+o = open Ctrl+P prompt
nnoremap <silent> <C-o> :CtrlPLine<CR>
"f4 = copy current path to buffer
noremap <silent> <F4> :let @" = expand("%")<CR>
"less keystrokes to access easy motion search
nmap z <Leader><Leader>s

    "----------------------------------------
    " ctrl+up/down = move line up/down
    "----------------------------------------
    function! MoveLineUp()
        call MoveLineOrVisualUp(".", "")
    endfunction

    function! MoveLineDown()
        call MoveLineOrVisualDown(".", "")
    endfunction

    function! MoveVisualUp()
        call MoveLineOrVisualUp("'<", "'<,'>")
        normal gv
    endfunction

    function! MoveVisualDown()
        call MoveLineOrVisualDown("'>", "'<,'>")
        normal gv
    endfunction

    function! MoveLineOrVisualUp(line_getter, range)
        let l_num = line(a:line_getter)
        if l_num - v:count1 - 1 < 0
            let move_arg = "0"
        else
            let move_arg = a:line_getter." -".(v:count1 + 1)
        endif
        call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
    endfunction

    function! MoveLineOrVisualDown(line_getter, range)
        let l_num = line(a:line_getter)
        if l_num + v:count1 > line("$")
            let move_arg = "$"
        else
            let move_arg = a:line_getter." +".v:count1
        endif
        call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
    endfunction

    function! MoveLineOrVisualUpOrDown(move_arg)
        let col_num = virtcol(".")
        execute "silent! ".a:move_arg
        execute "normal! ".col_num."|"
    endfunction

    nnoremap <silent> <C-Up> :<C-u>call MoveLineUp()<CR>
    nnoremap <silent> <C-Down> :<C-u>call MoveLineDown()<CR>
    inoremap <silent> <C-Up> <C-o>:call MoveLineUp()<CR>
    inoremap <silent> <C-Down> <C-o>:call MoveLineDown()<CR>
    "vnoremap <silent> <C-Up> :<C-u>call MoveVisualUp()<CR>
    "vnoremap <silent> <C-Down> :<C-u>call MoveVisualDown()<CR>
    xnoremap <silent> <C-Up> :<C-u>call MoveVisualUp()<CR>
    xnoremap <silent> <C-Down> :<C-u>call MoveVisualDown()<CR>

"----------------------------------------
" config Ctrl+P
"----------------------------------------
"disable CWD bullshit
let g:ctrlp_working_path_mode = 0
"enable matching files such as .htaccess
let g:ctrlp_dotfiles = 1
"show selected element at the top
let g:ctrlp_match_window_bottom = 1
"show list top->bottom
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:3,results:3'
"ignored files and directories
let g:ctrlp_custom_ignore = {}
let g:ctrlp_custom_ignore.dir  = '\v('
let g:ctrlp_custom_ignore.dir .= '\.hg|\.git|\.bzr'
let g:ctrlp_custom_ignore.dir .= '|data\/posts|_site|files|thumbs'
let g:ctrlp_custom_ignore.dir .= '|vendor|node_modules'
let g:ctrlp_custom_ignore.dir .= '|clutter|img|software|video'
let g:ctrlp_custom_ignore.dir .= ')($|\/)'
let g:ctrlp_custom_ignore.file  = '\v'
let g:ctrlp_custom_ignore.file .= '\~$'
let g:ctrlp_custom_ignore.file .= '|\.('
let g:ctrlp_custom_ignore.file .= 'o|exe|dll|so|o|swp|pyc|svn-base|stackdump'
let g:ctrlp_custom_ignore.file .= '|tar|zip|7z|gz'
let g:ctrlp_custom_ignore.file .= '|jpg|jpeg|gif|png|tga|bmp'
let g:ctrlp_custom_ignore.file .= '|pdf|doc|xls'
let g:ctrlp_custom_ignore.file .= '|wav|ogg|mp3|mp4|avi|mkv|ttf'
let g:ctrlp_custom_ignore.file .= ')$'

"----------------------------------------
" config airline
"----------------------------------------
"because of white background
let g:airline_theme = 'light'
"allow use of special characters that are supplied by terminal font
let g:airline_powerline_fonts = 1
"enable tabs
let g:airline#extensions#tabline#enabled = 1
"don't show buffers in the tabline - show tabs instead
let g:airline#extensions#tabline#show_buffers = 0
"show tab number near tab for easy navigation with :![number]gt
let g:airline#extensions#tabline#tab_nr_type = 1

"----------------------------------------
" config NERDtree
"----------------------------------------
"enable on console startup
let g:nerdtree_tabs_open_on_console_startup = 1
"always focus on files
let g:nerdtree_tabs_focus_on_files = 1
"don't focus nerdtree on parameterless startup
let g:nerdtree_tabs_smart_startup_focus = 2
"don't display these kinds of files
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.obj$', '\.o$']
"f2 = disable NERDtree
autocmd VimEnter * imap <F2> <esc>:NERDTreeTabsToggle<CR>
autocmd VimEnter * nmap <F2> :NERDTreeTabsToggle<CR>
"f3 = find current file in nerdtree
autocmd VimEnter * imap <F3> <esc>:NERDTreeFind<CR>
autocmd VimEnter * nmap <F3> :NERDTreeFind<CR>

"----------------------------------------
" file-type specific settings
"----------------------------------------
function! SetPhpOptions()
    "set max width to 120 characters
    if exists('+colorcolumn')
        setlocal colorcolumn=120
    endif
    setlocal tw=119
endfunction

"strip trailing whitespace for common source code
autocmd FileType c,cc,cxx,cpp,h,hpp,java,php,python,ruby,vim autocmd BufWritePre <buffer> :%s/\s\+$//e

"enable spellcheck and hard wrapping for text files
autocmd BufRead,BufNewFile *.txt,*.tex,*.md setlocal spell textwidth=79

"enable spellcheck and double gutter in git commit messages
autocmd BufRead,BufNewFile COMMIT_EDITMSG setlocal spell textwidth=72 colorcolumn=50,72

"disable syntax for certain files
autocmd BufRead,BufNewFile *.txt,*.lst,*.xml,*.json setlocal syntax=

"setup indentation for common file types
autocmd BufRead,BufNewFile *.txt,*.tex,*.md,*.lst FourSpaces
autocmd BufRead,BufNewFile *.c,*.cc,*.cpp,*.cxx,*.h,*.hpp FourSpaces
autocmd BufRead,BufNewFile *.py FourSpaces
autocmd BufRead,BufNewFile *.rb TwoSpaces
autocmd BufRead,BufNewFile *.yml TwoSpaces
autocmd BufRead,BufNewFile *.vim Tabs
autocmd BufRead,BufNewFile .*rc FourSpaces
autocmd BufRead,BufNewFile Makefile Tabs
autocmd BufRead,BufNewFile *.php,*.phtml FourSpaces

"other options
autocmd BufRead,BufNewFile *.php,*.phtml call SetPhpOptions()
