#!/bin/bash
uname="$(uname|tr '[:upper:]' '[:lower:]')"

function die {
    echo "$*"
    echo 'Installation aborted.'
    exit 1
}

function install_pacman {
    pacman -Q "$1" >/dev/null
    if [ $? -ne 0 ]; then
        echo "Installing $1 with pacman..."
        sudo pacman -S "$1"
    fi
}

function install_link {
    source=$1
    target=$2

    if [ -h "$target" ]; then
        echo -n 'Removing old symlink... '
        rm "$target"
    else
        [ -e "$target" ] && die "Not a symlink: $target."
    fi

    echo "Linking $source to $target..."
    ln -s "$source" "$target"
}

function install_link_or_cp {
    source=$1
    target=$2

    if [[ "$uname" =~ cygwin ]]; then
        if [ -h "$target" ]; then
            echo -n 'Removing old symlink... '
            rm "$target"
        fi
        echo "Copying $source to $target..."
        cp "$source" "$target"
    else
        install_link "$source" "$target"
    fi
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
pushd $DIR >/dev/null
echo 'Updating git submodules...'
git submodule init
git submodule update
popd >/dev/null

if command -v pacman &>/dev/null; then
    echo 'Checking pacman packages...'
    pacman -Q sudo >/dev/null || die 'Install sudo first.'
    install_pacman git
    install_pacman zsh
    install_pacman gvim
    install_pacman wget
    install_pacman curl
    install_pacman openssh
    install_pacman make
    install_pacman gcc
    install_pacman automake
    install_pacman lsof
    install_pacman htop
    install_pacman mpv
    install_pacman ttf-dejavu
    install_pacman rxvt-unicode
    install_pacman thunar
    install_pacman feh
    install_pacman xdotool
    install_pacman libconfig #for compton
    install_pacman autocutsel #synchronize primary and selection clipboards
    install_pacman clipit #keep clipboard content even after application closes
    aur compton -i -q
    aur xcb-util-cursor-git -i -q
    aur i3-gaps-next-git -i -q
    aur ttf-ipa-mona -i -q
    aur trackma-git -i -q
    aur escrotum-git -i -q
fi

if [ -d /usr/share/fonts ]; then
    fonts_dir="$HOME/.local/share/fonts"
    [ -d "$fonts_dir" ] || mkdir -p "$fonts_dir"
    find $DIR/misc -iregex '.*\.[to]tf' | while read -r x; do
        install_link "$x" "$fonts_dir/$(basename "$x")"
    done
fi

[ ! -d "$HOME/.vim" ] && mkdir "$HOME/.vim"
[ ! -d "$HOME/.vim/undo" ] && mkdir "$HOME/.vim/undo"
[ ! -d "$HOME/.vim/backup" ] && mkdir "$HOME/.vim/backup"
[ ! -d "$HOME/.vim/swap" ] && mkdir "$HOME/.vim/swap"
[ ! -d "$HOME/.vim/spell" ] && mkdir "$HOME/.vim/spell"

install_link "$DIR/ext/translator/tl"         "$DIR/bin/ext/tl"
install_link "$DIR/ext/i3-floater/i3-floater" "$DIR/bin/ext/i3-floater"
install_link "$DIR/ext/eyecandy/eyecandy"     "$DIR/bin/ext/eyecandy"
install_link "$DIR/.vim/spell/pl.utf-8.add"   "$HOME/.vim/spell/pl.utf-8.add"
install_link "$DIR/.vim/spell/en.utf-8.add"   "$HOME/.vim/spell/en.utf-8.add"
install_link "$DIR/.vim/vundle"               "$HOME/.vim/vundle"
install_link "$DIR/.vimrc"                    "$HOME/.vimrc"
install_link_or_cp "$DIR/.vimrc"              "$HOME/.vsvimrc"
install_link_or_cp "$DIR/.vimperatorrc"       "$HOME/.vimperatorrc"
install_link "$DIR/.zlogin"                   "$HOME/.zlogin"
install_link "$DIR/.zshrc"                    "$HOME/.zshrc"
install_link "$DIR/.bashrc"                   "$HOME/.bashrc"
install_link "$DIR/.inputrc"                  "$HOME/.inputrc"
install_link "$DIR/.minttyrc-light"           "$HOME/.minttyrc"
install_link "$DIR/.gitconfig"                "$HOME/.gitconfig"
install_link "$DIR/.gitignore"                "$HOME/.gitignore"
install_link "$DIR/.xinitrc"                  "$HOME/.xinitrc"
[ ! -d "$DIR/.config" ] && mkdir "$DIR/.config"
install_link "$DIR/.config/Xresources"        "$HOME/.config/Xresources"
install_link "$DIR/.config/Xresources-light"  "$HOME/.config/Xresources-light"
install_link "$DIR/.config/Xresources-dark"   "$HOME/.config/Xresources-dark"
install_link "$DIR/.config/mpv"               "$HOME/.config/mpv"
install_link "$DIR/.config/i3"                "$HOME/.config/i3"
install_link "$DIR/.config/i3status"          "$HOME/.config/i3status"
install_link "$DIR/.config/fontconfig"        "$HOME/.config/fontconfig"
install_link "$DIR/.config/compton.conf"      "$HOME/.config/compton.conf"
install_link "$DIR/.config/EyeCandy"          "$HOME/.config/EyeCandy"

echo 'Configuring applications...'
if command -v xfconf-query &>/dev/null; then
    #enable full path in thunar window title for scripting
    xfconf-query --channel thunar --property /misc-full-path-in-title --create --type bool --set true
fi

shopt -s nocasematch
if [[ "$uname" =~ cygwin ]]; then
    echo "Hiding dotfiles in $HOME..."
    find "$HOME" -maxdepth 1 -iname '.*' | while read -r x; do
        attrib +h +s $(cygpath -w `dirname "$x"`)`basename "$x"`
    done
fi

if [ -d /usr/share/fonts ]; then
    echo 'Generating font cache...'
    fc-cache
fi
