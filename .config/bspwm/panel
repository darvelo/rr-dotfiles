#!/bin/python3
from datetime import datetime, timedelta
from subprocess import Popen, PIPE
import alsaaudio
import psutil
import re
import sys
import threading
import time
import mpd
import math

fonts = \
[
    ['DejaVu Sans:size=9', 0],
    ['Font Awesome:size=10', 0],
    ['DejaVu Sans:pixelsize=11', -2],
]
shadow_color = '#507090'
inactive_color = '#707070'

class Renderer(object):
    def __init__(self):
        self.font = self.font_color = self.background_color = None
        self.clear()

    def clear(self):
        self.text = ''
        self.set_font(1)
        self.set_font_color('white')
        self.set_background_color('black')

    def set_font_color(self, color):
        if color != self.font_color:
            self.print('%%{F%s}' % (color))
            self.font_color = color

    def get_font_color(self):
        return self.font_color

    def set_background_color(self, color):
        if color != self.background_color:
            self.print('%%{B%s}' % (color))
            self.background_color = color

    def get_background_color(self):
        return self.background_color

    def set_font(self, font):
        if font != self.font:
            self.print('%%{T%d}' % (font))
            self.font = font

    def get_font(self):
        return self.font

    def print(self, text):
        self.text += text

    def print_icon(self, text):
        with self.temporary():
            self.set_font(2)
            self.print_space(2)
            self.print(text)
            self.print_space(2)

    def print_number(self, text):
        match = re.match('^(0*(?!\.|$))(.*)$', text)
        with self.temporary():
            self.set_font_color(shadow_color)
            self.print(match.group(1))
        self.print(match.group(2))

    def print_space(self, number):
        if not re.match('.*[\s\u2000-\u200b](%{[^}]*})*$', self.text):
            self.print('\u2004' * number) #number/3 em space

    def print_progressbar(self, number, width = 10):
        filled = int(number * width / 100.)
        with self.temporary():
            self.set_font(3)
            self.print('\u2588' * filled)
            self.set_font_color(inactive_color)
            self.print('â–ˆ' * (width - filled))

    def get_text(self):
        return self.text

    def switch_to_next_monitor(self):
        self.print('%{S+}')

    def align_to_right(self):
        self.print('%{r}')

    def temporary(self):
        return self.Temporary(self)

    class Temporary(object):
        def __init__(self, renderer):
            self.renderer = renderer

        def __enter__(self):
            self.font = self.renderer.font
            self.font_color = self.renderer.font_color
            self.background_color = self.renderer.background_color

        def __exit__(self, *args):
            self.renderer.set_font(self.font)
            self.renderer.set_font_color(self.font_color)
            self.renderer.set_background_color(self.background_color)



class MyRenderer(object):
    def __init__(self, data):
        self.renderer = Renderer()
        self.data = data

    def print_seconds(self, seconds):
        seconds = math.floor(float(seconds))
        self.renderer.print('%02d:%02d' % (seconds // 60, seconds % 60))

    def print_mpd_status(self):
        if self.data.mpd_status:
            self.renderer.print(self.data.current_song['artist'])
            self.renderer.print(' - ')
            self.renderer.print(self.data.current_song['title'])
            self.renderer.print_space(3)
            if 'elapsed' in self.data.mpd_status:
                self.print_seconds(self.data.mpd_status['elapsed'])
                self.renderer.print('/')
                self.print_seconds(self.data.current_song['time'])

    def print_cpu_usage(self):
        #self.renderer.print_icon('\uf085')
        self.renderer.print_icon('\uf0e7')
        self.renderer.print_progressbar(self.data.cpu)

    def print_volume(self):
        self.renderer.print_icon('\uf028')
        self.renderer.print_progressbar(self.data.volume)

    def print_date(self):
        #self.renderer.print_icon('\uf073')
        #self.renderer.print_icon('\uf133')
        self.renderer.print_space(2)
        self.renderer.print(datetime.strftime(self.data.time, '%a, %b %d'))

    def print_clock(self):
        self.renderer.set_font_color('white')
        #self.renderer.print_icon('\uf017')
        self.renderer.print_space(2)
        self.renderer.print(datetime.strftime(self.data.time, '%H:%M:%S'))

    def render(self):
        self.renderer.clear()
        for m in range(self.data.monitor_count):
            self.renderer.set_background_color('black')
            self.renderer.set_font_color('#dddddd')
            self.print_mpd_status()
            self.renderer.align_to_right()
            self.print_cpu_usage()
            self.print_volume()
            self.print_date()
            self.print_clock()
            self.renderer.print_space(2)
            self.renderer.switch_to_next_monitor()
            self.renderer.set_background_color('black')
        return self.renderer.get_text()



class Data(object):
    def __init__(self):
        self.monitor_count = 1
        self.cpu = 0
        self.volume = 0
        self.time = datetime.now()
        self.mpd_status = None

def refresh_cpu(data):
    while True:
        data.cpu = psutil.cpu_percent(interval=3)

def refresh_song(data):
    client = mpd.MPDClient()
    client.connect(host='localhost', port=6600)
    while True:
        data.mpd_status = client.status()
        data.current_song = client.currentsong()
        time.sleep(0.25)

def refresh(data):
    while True:
        data.time = datetime.now()
        data.volume = alsaaudio.Mixer().getvolume()[0]
        time.sleep(1)

def main():
    data = Data()

    threads = []
    for worker in [refresh_cpu, refresh_song, refresh]:
        thread = threading.Thread(target=worker, args=(data,))
        thread.daemon = True
        threads.append(thread)
        thread.start()

    command = ['bspc', 'control', '--subscribe']
    bspc_process = Popen(command, stdout=PIPE)

    command = ['lemonbar', '-gx19']
    for font in fonts:
        command += ['-f', font[0], '-o', font[1]]
    command = [str(x) for x in command]
    lemonbar_process = Popen(command, stdout=PIPE, stdin=PIPE)

    renderer = MyRenderer(data)
    while True:
        lemonbar_process.stdin.write((renderer.render() + "\n").encode('utf8'))
        lemonbar_process.stdin.flush()
        time.sleep(1)

if __name__ == '__main__':
    main()
